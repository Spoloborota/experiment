// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: profiles.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (user_id, first_name, last_name, age, gender, city, interests)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, first_name, last_name, age, gender, city, interests, created_at, updated_at
`

type CreateProfileParams struct {
	UserID    int32          `db:"user_id" json:"user_id"`
	FirstName string         `db:"first_name" json:"first_name"`
	LastName  string         `db:"last_name" json:"last_name"`
	Age       sql.NullInt32  `db:"age" json:"age"`
	Gender    sql.NullString `db:"gender" json:"gender"`
	City      sql.NullString `db:"city" json:"city"`
	Interests []string       `db:"interests" json:"interests"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.Age,
		arg.Gender,
		arg.City,
		pq.Array(arg.Interests),
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Age,
		&i.Gender,
		&i.City,
		pq.Array(&i.Interests),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileByID = `-- name: GetProfileByID :one
SELECT id, user_id, first_name, last_name, age, gender, city, interests, created_at, updated_at FROM profiles
WHERE id = $1
`

func (q *Queries) GetProfileByID(ctx context.Context, id int32) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileByID, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Age,
		&i.Gender,
		&i.City,
		pq.Array(&i.Interests),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileByUserID = `-- name: GetProfileByUserID :one
SELECT id, user_id, first_name, last_name, age, gender, city, interests, created_at, updated_at FROM profiles
WHERE user_id = $1
`

func (q *Queries) GetProfileByUserID(ctx context.Context, userID int32) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileByUserID, userID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Age,
		&i.Gender,
		&i.City,
		pq.Array(&i.Interests),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfilesCount = `-- name: GetProfilesCount :one
SELECT COUNT(*) FROM profiles
WHERE 
    ($1::text IS NULL OR gender = $1) AND
    ($2::text IS NULL OR city = $2) AND
    ($3::text[] IS NULL OR interests && $3)
`

type GetProfilesCountParams struct {
	Column1 string   `db:"column_1" json:"column_1"`
	Column2 string   `db:"column_2" json:"column_2"`
	Column3 []string `db:"column_3" json:"column_3"`
}

func (q *Queries) GetProfilesCount(ctx context.Context, arg GetProfilesCountParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getProfilesCount, arg.Column1, arg.Column2, pq.Array(arg.Column3))
	var count int64
	err := row.Scan(&count)
	return count, err
}

const searchProfiles = `-- name: SearchProfiles :many
SELECT id, user_id, first_name, last_name, age, gender, city, interests, created_at, updated_at FROM profiles
WHERE 
    ($1::text IS NULL OR gender = $1) AND
    ($2::text IS NULL OR city = $2) AND
    ($3::text[] IS NULL OR interests && $3)
ORDER BY created_at DESC
LIMIT $4 OFFSET $5
`

type SearchProfilesParams struct {
	Column1 string   `db:"column_1" json:"column_1"`
	Column2 string   `db:"column_2" json:"column_2"`
	Column3 []string `db:"column_3" json:"column_3"`
	Limit   int32    `db:"limit" json:"limit"`
	Offset  int32    `db:"offset" json:"offset"`
}

func (q *Queries) SearchProfiles(ctx context.Context, arg SearchProfilesParams) ([]Profile, error) {
	rows, err := q.db.QueryContext(ctx, searchProfiles,
		arg.Column1,
		arg.Column2,
		pq.Array(arg.Column3),
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Profile{}
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Age,
			&i.Gender,
			&i.City,
			pq.Array(&i.Interests),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profiles 
SET first_name = $2, last_name = $3, age = $4, gender = $5, city = $6, interests = $7
WHERE user_id = $1
RETURNING id, user_id, first_name, last_name, age, gender, city, interests, created_at, updated_at
`

type UpdateProfileParams struct {
	UserID    int32          `db:"user_id" json:"user_id"`
	FirstName string         `db:"first_name" json:"first_name"`
	LastName  string         `db:"last_name" json:"last_name"`
	Age       sql.NullInt32  `db:"age" json:"age"`
	Gender    sql.NullString `db:"gender" json:"gender"`
	City      sql.NullString `db:"city" json:"city"`
	Interests []string       `db:"interests" json:"interests"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateProfile,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.Age,
		arg.Gender,
		arg.City,
		pq.Array(arg.Interests),
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Age,
		&i.Gender,
		&i.City,
		pq.Array(&i.Interests),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
